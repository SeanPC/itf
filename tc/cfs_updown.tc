#des:support platform linux,aix,solaris
#P:55

dg=autotcdg
volprefix=autotcvol
vset=autotcvset
mpprefix=/autotc
ckptprefix=ckpt
mpprefix=/autotc
groupprefix=cfsgrp

oLog step "Checking basic environment of testbed"
#check if login without password by root and oracle user
if [ $NODESN -lt 2 ]
then
        oLog error "There must be 2 nodes and more for this test case"
        myexit 201
fi
checkNode root
for node in $NODES
do
        getHostnameOSProduct $node
done

oLog step "Find out 7 disks with size greater than 5g,and make a share dg among cluster"
disks=`getDisk $node share` || exit 201
disks=`echo "$disks"|awk '$2>4900 {print $1}'|head -7`

if [ `echo "$disks"|wc -l` -lt 7 ]
then
	oLog error "Failed to get enough disks"
	myexit 201
fi
disks=`echo "$disks"|xargs -n10000`
RExec root $NODE1 "vxdg -s init $dg $disks"


oLog step "Create 5 volumes with different layout and size will be 1g and mount them"
i=1
mountopt=(all=rw all=blkclear,mincache=dsync all=blkclear,mincache=closesync all=blkclear,mincache=direct all=blkclear,mincache=unbuffered)
for opt in "layout=concat-mirror mirror=2" "layout=mirror-concat mirror=2" "layout=mirror-stripe ncol=2" "layout=stripe-mirror ncol=3" "layout=stripe ncol=3" 
do
        echo "$opt" |grep mirror > /dev/null 2>&1 && RExec root $NODE1 "vxassist -g $dg make ${volprefix}$i 1g $opt fastresync=on logtype=DRL" || RExec root $NODE1 "vxassist -g $dg make ${volprefix}$i 1g $opt"
        mkVxfs $NODE1 $dg "${volprefix}${i}"
        cfsMount $NODE1 $dg ${volprefix}$i ${mpprefix}$i ${groupprefix}$i ${mountopt[$i-1]}
        i=$[$i+1]
done

oLog step "get the cvm master and cfs primary node,make suer they are on the same node,in case the reboot step could work as expect"
master=`getMasterNode` || exit 1
noderole=(`getCfsNodeRole $NODE1 ${mpprefix}1`) || exit 1
pnode=${noderole[0]}
npnode=${noderole[1]}
if [ "$master" != "$pnode" ]
then
        oLog des "Change $pnode to be cvm master node"
        RExec root $NODE1 "/opt/VRTS/bin/vxclustadm setmaster $pnode"
fi


i=6
oLog step "Create 5 volumes with different layout and size will be 1g and make volset,then mount"
for opt in "layout=stripe" "layout=stripe-mirror" "layout=mirror" "layout=mirror-stripe" "layout=concat"
do
        echo "$opt" |grep mirror > /dev/null 2>&1 && RExec root $pnode "vxassist -g $dg make ${volprefix}$i 1g $opt fastresync=on logtype=DRL" || RExec root $pnode "vxassist -g $dg make ${volprefix}$i 1g $opt"
        vsetvols+=" ${volprefix}$i"
        i=$[$i+1]
done
i=6
makeVolset $pnode $dg $vset "$vsetvols"
mkVxfs $pnode $dg "$vset"
cfsMount $pnode $dg ${vset} ${mpprefix}$i ${groupprefix}$i "all=rw"

oLog step "Make a volume then add to filesystem to be checkpoint volume"
RExec root $pnode "vxassist -g $dg make ${volprefix}11 1g"
RExec root $pnode "vxvset -g $dg addvol $vset ${volprefix}11"
RExec root $pnode "/opt/VRTS/bin/fsvoladm add -f metadataok ${mpprefix}$i ${volprefix}11 1g"

oLog step "fill in flag files into 6 mountpoints above and get the value of cksum for comprasion after restore checkpoint"
copyFileToRemoteKeepName $BASE/etc/mf.pl $pnode
for i in {1..6}
do
        RExec root $pnode "mkdir -p ${mpprefix}$i/mffile && /mf.pl.$PID -d ${mpprefix}$i/mffile -n 10 -s10 -L M"
        getCksum $pnode ${mpprefix}$i/mffile
        cksum0[$i]="$out"
done

#scenario 1
oLog step "Load io on the none primary node"
for i in {1..6}
do
        fsStressStart $npnode ${mpprefix}$i
        stresspid[$i]=$fsstresspid
done

oLog step "do vxresize on cvm master with 1g growing to all filesystem on master node,then check if size changed on all nodes"
RExec root $pnode "$cmd2"
resize0=(`echo "$out"|grep -P "${mpprefix}[0-9]{1}$"|awk '{print $NF " " $2}'|sort|awk '{print $2}'|sed -r "s/g|G//"|xargs -n100`)
for i in {1..5}
do
        RExec root $pnode "/opt/VRTS/bin/vxresize -g $dg ${volprefix}$i 2g"
done
i=`getRandomFromList 6,7,8,9,10`
vsetvol=${volprefix}$i
RExec root $pnode "/opt/VRTS/bin/vxresize -g $dg $vsetvol 2g"
for node in $NODES
do
        RExec root $node "$cmd2"
        resize1=(`echo "$out"|grep -P "${mpprefix}[0-9]{1}$"|awk '{print $NF " " $2}'|sort|awk '{print $2}'|sed -r "s/g|G//"|xargs -n100`)
        for i in 0 {1..5}
        do
                oLog des "FS size of ${mpprefix}$[$i+1] before changed and after changed are ${resize0[$i]}g,${resize1[$i]}g" 
                diff=`echo "scale=2;${resize1[$i]}-${resize0[$i]}"|bc` 
                if [ `echo "$diff<0.9"|bc` = 1 ]
                then
                        oLog error "FS size of ${mpprefix}$[$i+1] didn't increase as expect"
                        myexit 1
                fi
        done
done

oLog step "make the 1st checkpoint on the primary node and check the checkpoint from all nodes"
for i in {1..6}
do
        RExec root $pnode "/opt/VRTS/bin/fsckptadm -r create ${ckptprefix}${i}_1 ${mpprefix}$i"
done
for node in $NODES
do
        for i in {1..6}
        do
                oLog des "Check if checkpoint ${mpprefix}${i}_1 exists"
                RExec root $node "/opt/VRTS/bin/fsckptadm list ${mpprefix}${i}" "${ckptprefix}${i}_1"
        done
done

oLog step "reboot CFS Primary node and check fs size and checkpoint after it is up"
waitNodeReboot $pnode
waitGroupOnline $npnode cvm
for i in {1..60}
do
        RExec root $pnode "$cmd2"
        [ "`echo "$out"|grep -P "${mpprefix}[0-9]{1}$"|wc -l`" = 6 ] && i=61 && break
        sleep 5
done
if [ $i -ne 61 ] 
then
        oLog error "Timeout to wait the 6 CFS mounted"
        myexit 1
fi
RExec root $pnode "$cmd2"
resize2=(`echo "$out"|grep -P "${mpprefix}[0-9]{1}$"|awk '{print $NF " " $2}'|sort|awk '{print $2}'|sed -r "s/g|G//"|xargs -n100`)
for i in 0 {1..5}
do
        oLog des "CFS size before reboot and after reboot are :${resize1[$i]}g,${resize2[$i]}g"
        if [ ${resize1[$i]} != ${resize2[$i]} ]
        then
                oLog error "CFS size changed after reboot:${resize1[$i]}g->${resize2[$i]}g"
                myexit 1
        fi
        oLog des "Check if checkpoint ${mpprefix}$[$i+1]_1 exists"
        RExec root $pnode "/opt/VRTS/bin/fsckptadm list ${mpprefix}$[$i+1]" "${ckptprefix}$[$i+1]_1"
done

oLog step "stop io on the none primary node"
fsStressStop $npnode "${stresspid[*]}"

#scenario 2
oLog step "get the cvm master and cfs primary node,make suer they are on the same node,in case the reboot step could work as expect"
master=`getMasterNode` || exit 1
noderole=(`getCfsNodeRole $NODE1 ${mpprefix}1`) || exit 1
pnode=${noderole[0]}
npnode=${noderole[1]}
npnodes=`echo "$NODES"|sed "s/$pnode//"`
if [ "$master" != "$pnode" ]
then
        oLog des "Change $pnode to be cvm master node"
        RExec root $NODE1 "/opt/VRTS/bin/vxclustadm setmaster $pnode"
fi

oLog step "Load io on the primary node"
for i in {1..6}
do
        fsStressStart $pnode ${mpprefix}$i
        stresspid[$i]=$fsstresspid     
done

oLog step "do vxresize on cvm master with 1g reducing to all filesystem on slave node,then check if size changed on all nodes"
RExec root $npnode "$cmd2"
resize0=(`echo "$out"|grep -P "${mpprefix}[0-9]{1}$"|awk '{print $NF " " $2}'|sort|awk '{print $2}'|sed -r "s/g|G//"|xargs -n100`)
for i in {1..5}
do
        RExec root $npnode "/opt/VRTS/bin/vxresize -g $dg ${volprefix}$i 1g"
done
RExec root $npnode "/opt/VRTS/bin/vxresize -g $dg $vsetvol 1g"
for node in $NODES
do
        RExec root $node "$cmd2"
        resize1=(`echo "$out"|grep -P "${mpprefix}[0-9]{1}$"|awk '{print $NF " " $2}'|sort|awk '{print $2}'|sed -r "s/g|G//"|xargs -n100`)
        for i in 0 {1..5}
        do
                oLog des "FS size of ${mpprefix}$[$i+1] before changed and after changed are ${resize0[$i]}g,${resize1[$i]}g" 
                diff=`echo "scale=2;${resize0[$i]}-${resize1[$i]}"|bc` 
                if [ `echo "$diff<0.9"|bc` = 1 ]
                then
                        oLog error "FS size of ${mpprefix}$[$i+1] didn't increase as expect"
                        myexit 1
                fi
        done
        RExec root $node "vxprint -g $dg"
        vollen0=`echo "$out"|grep -P "^v\s+autotcvol[0-9]+ "|awk '{print $5}'|sort -n|sort -u|xargs -n100`
        oLog des "volume length after reducing on $node is $vollen0"
        if [ "$vollen0" != 2097152 ]
        then
                oLog error "volume size of ${mpprefix}$[$i+1] didn't increase as expect" 
                myexit 1
        fi
done

oLog step "make the 2nd checkpoint on a none primary node and check the checkpoints from all nodes"
for i in {1..6}
do
        RExec root $npnode "/opt/VRTS/bin/fsckptadm -r create ${ckptprefix}${i}_2 ${mpprefix}$i"
done
for node in $NODES
do
        for i in {1..6}
        do
                oLog des "Check if checkpoint ${mpprefix}${i}_2 exists"
                RExec root $node "/opt/VRTS/bin/fsckptadm list ${mpprefix}${i}" "${ckptprefix}${i}_2"
        done
done

oLog step "reboot none Primary nodes and check fs size and checkpoint after they are up"
for node in $npnodes
do
        {
                waitNodeReboot $node
        } &
        sleep 0.5
done
wait
cat $olog |grep TCERROR > /dev/null 2>&1 && myexit 1
waitGroupOnline $pnode cvm
for i in {1..60}
do
        RExec root $pnode "/opt/VRTS/bin/hagrp -state"
        if ! echo "$out"|grep -P "^cfsgrp[1-6]{1}"|grep -v ONLINE > /dev/null 2>&1 
        then
                i=61 && break
        fi
        sleep 5
done
if [ $i -ne 61 ] 
then
        oLog error "Timeout to wait the 6 CFS mounted"
        myexit 1
fi
for node in $npnodes
do
        RExec root $node "$cmd2"
        resize2=(`echo "$out"|grep -P "${mpprefix}[0-9]{1}$"|awk '{print $NF " " $2}'|sort|awk '{print $2}'|sed -r "s/g|G//"|xargs -n100`)
        for i in 0 {1..5}
        do
                oLog des "CFS size before reboot and after reboot on node $node are :${resize1[$i]}g,${resize2[$i]}g"
                if [ ${resize1[$i]} != ${resize2[$i]} ]
                then
                        oLog error "CFS size changed after reboot on node $node:${resize1[$i]}g->${resize2[$i]}g"
                        myexit 1
                fi
                oLog des "Check if checkpoint ${mpprefix}$[$i+1]_2 exists on $node"
                RExec root $node "/opt/VRTS/bin/fsckptadm list ${mpprefix}$[$i+1]" "${ckptprefix}$[$i+1]_2"
        done
        RExec root $node "vxprint -g $dg"
        vollen0=`echo "$out"|grep -P "^v\s+autotcvol[0-9]+ "|awk '{print $5}'|sort -n|sort -u|xargs -n100`
        oLog des "volume length after reducing on $node is $vollen0"
        if [ "$vollen0" != 2097152 ]
        then
                oLog error "volume size changed after reboot" 
                myexit 1
        fi
done
oLog step "stop io on the primary node"
fsStressStop $npnode "${stresspid[*]}"

#scenario 3
oLog step "make the 3rd checkpoint on a random node"
random_node=`getRandomFromList ${arg[0]}` || exit 1
for i in {1..6}
do
        RExec root $random_node "/opt/VRTS/bin/fsckptadm -r create ${ckptprefix}${i}_3 ${mpprefix}$i"
done

#scenario 4
oLog step "reboot all nodes,and wait for all cfs mountedm and then umount them incase restoring checkpoints"
for node in $NODES
do
        {
                waitNodeReboot $node
        } &
        sleep 0.5
done
wait
cat $olog |grep TCERROR > /dev/null 2>&1 && myexit 1
waitVCSAgentOnline $NODE1
waitGroupOnline $NODE1 cvm
for i in {1..60}
do
        RExec root $NODE1 "/opt/VRTS/bin/hagrp -state"
        if ! echo "$out"|grep -P "^cfsgrp[1-6]{1}"|grep -v ONLINE > /dev/null 2>&1 
        then
                i=61 && break
        fi
        sleep 5
done
if [ $i -ne 61 ] 
then
        oLog error "Timeout to wait the 6 CFS mounted"
        myexit 1
fi
RExec root $NODE1 "/opt/VRTS/bin/cfsumount all"

oLog step "get 3 random cfs to restore the checkpoints and compare the cksum value"
list=1,2,3,4,5,6
for i in {1..3}
do
        random=`getRandomFromList $list` || exit 1
        seq[$i-1]=$random
        list=`echo $list|sed -r "s/$random//;s/^,|,$//;s/,,/,/"`
done
for i in 0 1 2
do
        [ ${seq[$i]} = 6 ] && vol=/dev/vx/dsk/$dg/$vset || vol=/dev/vx/dsk/$dg/${volprefix}${seq[$i]}
        RExec root $NODE1 "/opt/VRTS/bin/fsckpt_restore -y $vol ${ckptprefix}${seq[$i]}_$[$i+1]"
        RExec root $NODE1 "/opt/VRTS/bin/cfsmount ${mpprefix}${seq[$i]}"
        getCksum $NODE1 ${mpprefix}${seq[$i]}/mffile
        cksum1[${seq[$i]}]="$out"
        if [ "${cksum1[${seq[$i]}]}" != "${cksum0[${seq[$i]}]}" ]
        then
                oLog error "cksum value are not the same after restore checkpoint"
                myexit 1
        fi
done
oLog flag
myexit 10
